<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git的使用命令</title>
      <link href="/2024/07/01/git/"/>
      <url>/2024/07/01/git/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>生成.git文件夹，用来存储档案变更的历史，不能删除,删除会丢失档案。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>查看目录中每个档案的状态未追踪的不会被记录，要上传的必须放到暂存区。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add  档案的名称</span><br></pre></td></tr></table></figure><p>把要上传的代码文件加入暂存区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;版本历史信息”</span><br></pre></td></tr></table></figure><p>提交修改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log  </span><br></pre></td></tr></table></figure><p>显示先前的提交历史，按q退出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --oneline</span><br></pre></td></tr></table></figure><p>   获取简化过的提交历史。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff  还原点的id -- 档案名称</span><br></pre></td></tr></table></figure><p>比较当前版本和之前的差异。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout  id号 -- 档案名称</span><br></pre></td></tr></table></figure><p>把现在的版本还原到之前的版本   这个变动需要提交</p><p>删除文件同样需要先添加，再提交。</p><p>如果有忽略的文件，新建.gitignore ，放在这个文件里。</p><p>在GitHub里的库里上传的操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin GitHub仓库链接 //用来连接本地和远端的存储库</span><br><span class="line">git branch -M main   //原来的主线分支改为新的分支main</span><br><span class="line">git push -u origin main   //把本地位于main的分支推送到云端</span><br></pre></td></tr></table></figure><p>每次修改后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><p>就能把修改推送到GitHub</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言知识点</title>
      <link href="/2024/07/01/C%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2024/07/01/C%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="结构体对齐方式"><a href="#结构体对齐方式" class="headerlink" title="结构体对齐方式"></a>结构体对齐方式</h2><h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><h4 id="结构体-A"><a href="#结构体-A" class="headerlink" title="结构体 A"></a>结构体 <code>A</code></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cCopy codestruct A &#123;</span><br><span class="line">    int a;</span><br><span class="line">    char b;</span><br><span class="line">    short c;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>成员对齐要求：</p><ol><li><code>int a</code>：对齐到 4 字节边界，占 4 字节。</li><li><code>char b</code>：对齐到 1 字节边界，占 1 字节。</li><li><code>short c</code>：对齐到 2 字节边界，占 2 字节。</li></ol><p>内存布局如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">| int a (4 bytes) | char b (1 byte) | padding (1 byte) | short c (2 bytes) |</span><br></pre></td></tr></table></figure><p>详细解释：</p><ul><li><code>int a</code> 从偏移量 0 开始，占用 4 字节。</li><li><code>char b</code> 从偏移量 4 开始，占用 1 字节。</li><li>为了使 <code>short c</code> 对齐到 2 字节边界，插入 1 字节的填充，使 <code>short c</code> 从偏移量 6 开始，占用 2 字节。</li></ul><p>总大小：8 字节。</p><h4 id="结构体-B"><a href="#结构体-B" class="headerlink" title="结构体 B"></a>结构体 <code>B</code></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cCopy codestruct B &#123;</span><br><span class="line">    char b;</span><br><span class="line">    int a;</span><br><span class="line">    short c;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>成员对齐要求：</p><ol><li><code>char b</code>：对齐到 1 字节边界，占 1 字节。</li><li><code>int a</code>：对齐到 4 字节边界，占 4 字节。</li><li><code>short c</code>：对齐到 2 字节边界，占 2 字节。</li></ol><p>内存布局如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">| char b (1 byte) | padding (3 bytes) | int a (4 bytes) | short c (2 bytes) | padding (2 bytes) |</span><br></pre></td></tr></table></figure><p>详细解释：</p><ul><li><code>char b</code> 从偏移量 0 开始，占用 1 字节。</li><li>为了使 <code>int a</code> 对齐到 4 字节边界，插入 3 字节的填充，使 <code>int a</code> 从偏移量 4 开始，占用 4 字节。</li><li><code>short c</code> 从偏移量 8 开始，占用 2 字节。</li><li>为了使结构体整体大小对齐到 <code>int a</code> 的最大对齐要求（4 字节），在 <code>short c</code> 后面插入 2 字节的填充，使结构体总大小为 12 字节。</li></ul><p>总大小：12 字节。</p><h3 id="加了-pragma-pack-2"><a href="#加了-pragma-pack-2" class="headerlink" title="加了#pragma pack(2)"></a>加了#pragma pack(2)</h3><h4 id="结构体-A-1"><a href="#结构体-A-1" class="headerlink" title="结构体 A"></a>结构体 <code>A</code></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#pragma pack(2)</span><br><span class="line">struct A &#123;</span><br><span class="line"> int a;</span><br><span class="line"> char b;</span><br><span class="line"> short c;</span><br><span class="line">&#125;;</span><br><span class="line">#pragma pack()</span><br></pre></td></tr></table></figure><p>在 <code>#pragma pack(2)</code> 的作用下，结构体 <code>A</code> 的成员按最大 2 字节对齐：</p><ol><li><code>int a</code>：通常对齐到 4 字节，但由于 <code>#pragma pack(2)</code>，对齐到 2 字节，占 4 字节。</li><li><code>char b</code>：对齐到 1 字节，占 1 字节。</li><li><code>short c</code>：对齐到 2 字节，占 2 字节。</li></ol><p>内存布局如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">| int a (4 bytes) | char b (1 byte) | padding (1 byte) | short c (2 bytes) |</span><br></pre></td></tr></table></figure><p>总大小：8 字节。</p><h4 id="结构体-B-1"><a href="#结构体-B-1" class="headerlink" title="结构体 B"></a>结构体 <code>B</code></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#pragma pack(4)</span><br><span class="line">struct B &#123;</span><br><span class="line"> char b;</span><br><span class="line"> int a;</span><br><span class="line"> short c;</span><br><span class="line">&#125;;</span><br><span class="line">#pragma pack()</span><br></pre></td></tr></table></figure><p>在 <code>#pragma pack(4)</code> 的作用下，结构体 <code>B</code> 的成员按最大 4 字节对齐：</p><ol><li><code>char b</code>：对齐到 1 字节，占 1 字节。</li><li><code>int a</code>：对齐到 4 字节，占 4 字节。</li><li><code>short c</code>：对齐到 2 字节，占 2 字节。</li></ol><p>内存布局如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">| char b (1 byte) | padding (3 bytes) | int a (4 bytes) | short c (2 bytes) | padding (2 bytes) |</span><br></pre></td></tr></table></figure><p>总大小：12 字节。</p><h2 id="const与指针"><a href="#const与指针" class="headerlink" title="const与指针"></a>const与指针</h2><p> const默认修饰左边的内容，如果左边没有东西则修饰其右边的内容 </p><p>  const int *a  const左边没有东西，因此const修饰int，则指针指向的内容不可通过指针修改 </p><p>  int const *a  const左边有东西，因此const修饰int </p><p>  int* const a  const修饰*，即指针不能改变指向 </p><p>  const int * const a 第一个const修饰int，第二个const修饰*，即指针指向内容不可修改，也不能改变指针指向 </p><p>  总结：<em>在const左边，不能改变指针指向，</em>在const右边，不能修改所指的值 </p><h2 id="字符常量"><a href="#字符常量" class="headerlink" title="字符常量"></a>字符常量</h2><p>  <strong>字符常量</strong>有两种：  </p><p>   一种是<strong>普通字符</strong>，即用单撇号括起来的一个字符，如’b’ ，’y’，‘？’。字符常量在储存在计算机的储存单元中时，是以其代码（一般采用ASCII代码）储存的。  </p><p>   另一种是<strong>转义字符</strong>，即特殊字符常量。转移字符是C语言中表示字符的一种特殊形式，其含义是将反斜杠后面的字符转换成另外的意义。  </p><p>   另外还可以用字符的<a href="https://baike.baidu.com/item/ASCII">ASCII</a>码表示，即用反斜符()开头，后跟字符的ASCII码，这种方法也称为转义序列表示法，具体方法是:有两种形式：  </p><p>   一种是用字符的<a href="https://baike.baidu.com/item/%E5%85%AB%E8%BF%9B%E5%88%B6">八进制</a>ASCII码，表示为：\0dd.这里，0dd是八进制值（0可以省略）。  </p><p>   另一种使用字符的<a href="https://baike.baidu.com/item/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6">十六进制</a>ASCII码值，表示为　\xhh或Xhh　这里hh是两位十六进制值。  </p><p>   如：’A’ ，’\101’ 和 ‘[x41](<a href="https://baike.baidu.com/item/x41)'%E9%83%BD%E8%A1%A8%E7%A4%BA%E5%90%8C%E4%B8%80%E4%B8%AA[%E5%AD%97%E7%AC%A6](https://baike.baidu.com/item/%E5%AD%97%E7%AC%A6)%E5%B8%B8%E9%87%8F%E3%80%82">https://baike.baidu.com/item/x41)&#39;都表示同一个[字符](https://baike.baidu.com/item/字符)常量。</a>  </p><p>   使用单撇号括起一个字符的形式即字符常量。使用字符常量需要注意以下几点：  </p><p>   （1）字符常量只能用单撇号括起来，不能使用单引号或其他括号。  </p><p>   （2）字符常量中只能包括一个字符，不能是字符串。  </p><p>   （3）字符常量是区分大小写的。  </p><p>   （4）单撇号只是界限符，不属于字符常量中旳一部分，字符常量只能是<strong>一个</strong>字符，不包括单撇号。  </p><p>   （5）单撇号里面可以是数字、字母等C语言字符集中除’和\以外所有可现实的单个字符，但是数字被定义为字符之后则不能参与数值运算。  </p><h2 id="字符串长度，"><a href="#字符串长度，" class="headerlink" title="字符串长度，"></a>字符串长度，</h2><p>就是字符串包含了多少个字符（不包括最后的结束符’\0’）。C 语言中 strlen() 可以获取字符串的长度，其原型是：size_t strlen(const char *);<br>\n 是转义字符，代表换行，是一个字符。</p><h2 id="逗号表达式"><a href="#逗号表达式" class="headerlink" title="逗号表达式"></a>逗号表达式</h2><p>他是将括号中所有表达式的值算出来，但是只使用最后一个表达式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int` `a, b;</span><br><span class="line">b = (a = 3*5, a*4, a*5);</span><br><span class="line">printf``(``&quot;%d&quot;``,b);</span><br></pre></td></tr></table></figure><p>这个值是75；</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown的简单使用方法</title>
      <link href="/2024/07/01/test/"/>
      <url>/2024/07/01/test/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown是什么"><a href="#Markdown是什么" class="headerlink" title="Markdown是什么"></a>Markdown是什么</h1><p><strong>markdowm是一种语言，typera是编辑markdown的软件。</strong></p><h2 id="基本使用方法："><a href="#基本使用方法：" class="headerlink" title="基本使用方法："></a>基本使用方法：</h2><h3 id="一：文本使用"><a href="#一：文本使用" class="headerlink" title="一：文本使用"></a>一：文本使用</h3><h4 id="1-Ctrl-数字（1，2，3，4，5，6），代表由大到小六个标题等级"><a href="#1-Ctrl-数字（1，2，3，4，5，6），代表由大到小六个标题等级" class="headerlink" title="1.Ctrl+数字（1，2，3，4，5，6），代表由大到小六个标题等级"></a>1.Ctrl+数字（1，2，3，4，5，6），代表由大到小六个标题等级</h4><h1 id="第一级别"><a href="#第一级别" class="headerlink" title="第一级别"></a>第一级别</h1><h2 id="第二级别"><a href="#第二级别" class="headerlink" title="第二级别"></a>第二级别</h2><h3 id="第三级别"><a href="#第三级别" class="headerlink" title="第三级别"></a>第三级别</h3><h4 id="第四级别"><a href="#第四级别" class="headerlink" title="第四级别"></a>第四级别</h4><h5 id="第五级别"><a href="#第五级别" class="headerlink" title="第五级别"></a>第五级别</h5><h6 id="第六级别"><a href="#第六级别" class="headerlink" title="第六级别"></a>第六级别</h6><h4 id="2-分割线"><a href="#2-分割线" class="headerlink" title="2.分割线"></a>2.分割线</h4><p>三个+++，***，表示一道分割线</p><p>+++</p><h4 id="3-ctrl-u表示给文本加下划线"><a href="#3-ctrl-u表示给文本加下划线" class="headerlink" title="3.ctrl+u表示给文本加下划线"></a>3.ctrl+u表示给文本加下划线</h4><p>删除线alt+shift+5</p><p><del>删除线</del></p><p><del>删除线</del></p><h4 id="5-斜体-文本"><a href="#5-斜体-文本" class="headerlink" title="5.斜体  文本"></a>5.斜体  <em>文本</em></h4><p><em>斜体</em></p><p><em>ctrl+i</em></p><h4 id="6-粗体文本"><a href="#6-粗体文本" class="headerlink" title="6.粗体文本"></a>6.粗体文本</h4><p><strong>ctrl+B</strong></p><h4 id="7-设置高亮字体"><a href="#7-设置高亮字体" class="headerlink" title="7.设置高亮字体"></a>7.设置高亮字体</h4><p>点击文件，点击偏好设置，勾选高亮，之后重启。&#x3D; 文本 &#x3D;&#x3D;</p><p>&#x3D;&#x3D;文本&#x3D;&#x3D;</p><h4 id="8-设置字体颜色"><a href="#8-设置字体颜色" class="headerlink" title="8.设置字体颜色"></a>8.设置字体颜色</h4><p><img src="https://github.com/QCY01/webstorm/raw/main/colour.png"></p><p><font size=2 color="blue">设置字体大小为2，颜色为蓝色</font></p><h4 id="9-文本对齐"><a href="#9-文本对齐" class="headerlink" title="9.文本对齐"></a>9.文本对齐</h4><p><img src="https://github.com/QCY01/webstorm/raw/main/7ba43155-a016-4d70-ab29-eabbb7ea440d.png"></p><p align="lift">左对齐</p><p align="center">居中对齐</p><p align="right">右对齐</p><h3 id="二：插入方法"><a href="#二：插入方法" class="headerlink" title="二：插入方法"></a>二：插入方法</h3><h4 id="1-插入链接"><a href="#1-插入链接" class="headerlink" title="1.插入链接"></a>1.插入链接</h4><h5 id="（1）链接为外部地址"><a href="#（1）链接为外部地址" class="headerlink" title="（1）链接为外部地址"></a>（1）链接为外部地址</h5><p><img src="https://github.com/QCY01/webstorm/raw/main/lianjie.png"></p><p><a href="https://github.com/">链接描述比如GitHub</a></p><h5 id="（2）相对地址"><a href="#（2）相对地址" class="headerlink" title="（2）相对地址"></a>（2）相对地址</h5><p>[相对地址] (.&#x2F;地址)</p><p>.&#x2F;表示.md文件所在的地址 …&#x2F;表示.md的上一级地址</p><h4 id="2-插入图片"><a href="#2-插入图片" class="headerlink" title="2.插入图片"></a>2.插入图片</h4><p>​右键插入，填写图片地址</p><h4 id="3-插入表格"><a href="#3-插入表格" class="headerlink" title="3.插入表格"></a>3.插入表格</h4><p>​ctral+T</p><table><thead><tr><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td>2</td><td></td><td>3</td></tr><tr><td>3</td><td></td><td></td></tr><tr><td>4</td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/CSS/coustom.css"/>
      <url>/CSS/coustom.css</url>
      
        <content type="html"><![CDATA[/* 鼠标样式 */#cursor {    position: fixed;    width: 16px;    height: 16px;    /* 这里改变跟随的底色 */    background: rgb(57, 197, 187);    border-radius: 8px;    opacity: 0.25;    z-index: 10086;    pointer-events: none;    transition: 0.2s ease-in-out;    transition-property: background, opacity, transform;}#cursor.hidden {    opacity: 0;}#cursor.hover {    opacity: 0.1;    transform: scale(2.5);    -webkit-transform: scale(2.5);    -moz-transform: scale(2.5);    -ms-transform: scale(2.5);    -o-transform: scale(2.5);}#cursor.active {    opacity: 0.5;    transform: scale(0.5);    -webkit-transform: scale(0.5);    -moz-transform: scale(0.5);    -ms-transform: scale(0.5);    -o-transform: scale(0.5);}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/cursor.js"/>
      <url>/js/cursor.js</url>
      
        <content type="html"><![CDATA[var CURSOR;Math.lerp = (a, b, n) => (1 - n) * a + n * b;const getStyle = (el, attr) => {    try {        return window.getComputedStyle            ? window.getComputedStyle(el)[attr]            : el.currentStyle[attr];    } catch (e) {}    return "";};class Cursor {    constructor() {        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    move(left, top) {        this.cursor.style["left"] = `${left}px`;        this.cursor.style["top"] = `${top}px`;    }    create() {        if (!this.cursor) {            this.cursor = document.createElement("div");            this.cursor.id = "cursor";            this.cursor.classList.add("hidden");            document.body.append(this.cursor);        }        var el = document.getElementsByTagName('*');        for (let i = 0; i < el.length; i++)            if (getStyle(el[i], "cursor") == "pointer")                this.pt.push(el[i].outerHTML);        document.body.appendChild((this.scr = document.createElement("style")));        // 这里改变鼠标指针的颜色 由svg生成        this.scr.innerHTML = `* {cursor: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8' width='8px' height='8px'><circle cx='4' cy='4' r='4' opacity='1.0' fill='rgb(57, 197, 187)'/></svg>") 4 4, auto}\``;    }    refresh() {        this.scr.remove();        this.cursor.classList.remove("hover");        this.cursor.classList.remove("active");        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    init() {        document.onmouseover  = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.add("hover");        document.onmouseout   = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.remove("hover");        document.onmousemove  = e => {(this.pos.curr == null) && this.move(e.clientX - 8, e.clientY - 8); this.pos.curr = {x: e.clientX - 8, y: e.clientY - 8}; this.cursor.classList.remove("hidden");};        document.onmouseenter = e => this.cursor.classList.remove("hidden");        document.onmouseleave = e => this.cursor.classList.add("hidden");        document.onmousedown  = e => this.cursor.classList.add("active");        document.onmouseup    = e => this.cursor.classList.remove("active");    }    render() {        if (this.pos.prev) {            this.pos.prev.x = Math.lerp(this.pos.prev.x, this.pos.curr.x, 0.15);            this.pos.prev.y = Math.lerp(this.pos.prev.y, this.pos.curr.y, 0.15);            this.move(this.pos.prev.x, this.pos.prev.y);        } else {            this.pos.prev = this.pos.curr;        }        requestAnimationFrame(() => this.render());    }}(() => {    CURSOR = new Cursor();    // 需要重新获取列表时，使用 CURSOR.refresh()})();]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
